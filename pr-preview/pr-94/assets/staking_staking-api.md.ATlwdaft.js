import{r as e,R as s,c as A}from"./chunks/client.r8mSQ1EB.js";import{L as N,P as D}from"./chunks/PlayIcon.2awFFRWP.js";import{a as B,o as L}from"./chunks/common.HiEjcPH8.js";import{h as q,l as H,c as G,m as S,U as T,o as $}from"./chunks/framework.h-69KxoN.js";const V=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState("");e.useEffect(()=>{l?B.find(a=>{a.key===l&&d(a)}):d(void 0),h(""),t({})},[l]);const c=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r){alert("Please enter an address!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query GetStrideStakedAssetBalance($strideAddress: String!, $asset: SupportedAssets!) {
      staking {
        getStrideStakedAssetBalance(asset: $asset, strideAddress: $strideAddress) {
          amount
          decimal
          denom
        }
      }
    }`,variables:{asset:o.key,strideAddress:r}})}).then(n=>n.json()).then(n=>{t(n)}).catch(n=>{t(n)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:a=>m(a.target.value)},s.createElement("option",{value:void 0},"Select a asset"),B.map(a=>s.createElement("option",{key:a.key,value:a.key},a.label))))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("span",null,"Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"address",name:"Address",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:a=>h(a.target.value)})))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:c,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},Q=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState(""),[c,a]=e.useState(""),[n,C]=e.useState(""),[b,f]=e.useState(""),[y,v]=e.useState(""),[u,x]=e.useState(""),I=()=>{h(""),a(""),C(""),f(""),v(""),x("")};e.useEffect(()=>{l?B.find(E=>{E.key===l&&d(E)}):d(void 0),I(),t({})},[l]);const _=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r||!c||!n||!b||!y||!u){alert("Please enter all the required fields!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query CreateStrideLiquidStakingTx($input: StrideStakingInput!) {
      staking {
      createStrideLiquidStakingTx(input: $input)
      }
    }`,variables:{input:{recieverStrideAddr:r,amount:c,senderAddr:n,senderPubkeyHex:b,asset:o.key,timeoutHeight:y,gasLimit:u}}})}).then(w=>w.json()).then(w=>{t(w)}).catch(w=>{t(w)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4"},s.createElement("div",{className:"flex items-center gap-10 max-sm:flex-col max-sm:items-start max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:E=>m(E.target.value)},s.createElement("option",{value:void 0},"Select a asset"),B.map(E=>s.createElement("option",{key:E.key,value:E.key},E.label))))),s.createElement("div",{className:"flex flex-col gap-2 max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Reciever Stride Addres:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"recieverStrideAddr",name:"recieverStrideAddr",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:E=>h(E.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Amount:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"amount",name:"amount",value:c,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter amount",onChange:E=>a(E.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Sender Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"senderAddr",name:"senderAddr",value:n,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:E=>C(E.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Sender Pubkey Hex:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"senderPubkeyHex",name:"senderPubkeyHex",value:b,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter a pubkey hex",onChange:E=>f(E.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Timeout Height:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"timeoutHeight",name:"timeoutHeight",value:y,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter timeout height",onChange:E=>v(E.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Gas limit:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"gasLimit",name:"gasLimit",value:u,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter gas limit",onChange:E=>x(E.target.value)})))))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:_,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},M=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState("");e.useEffect(()=>{l?B.find(a=>{a.key===l&&(d(a),h(a.exampleAddress||""))}):(d(void 0),h("")),t({})},[l]);const c=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r){alert("Please enter an address!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query getCosmosDelegations($asset: SupportedAssets!, $address: String!) {
      staking {
        getCosmosDelegations(address: $address, asset: $asset) {
          amount
          decimal
          denom
          validatorAddress
          validatorName
        }
      }
    }`,variables:{asset:o.key,address:r}})}).then(n=>n.json()).then(n=>{t(n)}).catch(n=>{t(n)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:a=>m(a.target.value)},s.createElement("option",{value:void 0},"Select a asset"),B.map(a=>s.createElement("option",{key:a.key,value:a.key},a.label))))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("span",null,"Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"address",name:"Address",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:a=>h(a.target.value)})))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:c,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},R=()=>{const F="https://gql-router.xdefi.services/graphql",k=["Meria","StakeLab","Custom"],[i,g]=e.useState(!1),[t,l]=e.useState({}),[m,o]=e.useState(void 0),[d,r]=e.useState(void 0),[h,c]=e.useState(void 0),[a,n]=e.useState(""),[C,b]=e.useState(""),[f,y]=e.useState(""),[v,u]=e.useState(void 0),[x,I]=e.useState(null),[_,E]=e.useState(""),w=()=>{c(void 0),n(""),b(""),y(""),u(void 0),I(null),E("")};e.useEffect(()=>{m?B.find(p=>{p.key===m&&r(p)}):r(void 0),w(),l({})},[m]),e.useEffect(()=>{E("")},[x]);const j=async()=>{if(g(!0),l({}),!d){alert("Please select a asset!"),g(!1);return}if(!h||!a||!C||!f||!v||!x||x==="Custom"&&!_){alert("Please enter all the required fields!"),g(!1);return}const p=`query CreateCosmosDelegateTx($delegationInput: CosmosDelegationInput!, $validatorAddress: String, $provider: Providers) {
      staking {
        createCosmosDelegateTx(
          delegationInput: $delegationInput
          provider: $provider
          validatorAddress: $validatorAddress
        )
      }
    }`;let O={delegationInput:{asset:d.key,amount:h,delegatorAddress:a,delegatorPubkeyHex:C,memo:f,gasLimit:v},provider:x};x==="Custom"&&(O={delegationInput:{asset:d.key,amount:h,delegatorAddress:a,delegatorPubkeyHex:C,memo:f,gasLimit:v},provider:null,validatorAddress:_}),await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:p,variables:O})}).then(P=>P.json()).then(P=>{l(P)}).catch(P=>{l(P)}).finally(()=>{g(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4"},s.createElement("div",{className:"flex items-center gap-10 max-sm:flex-col max-sm:items-start max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:p=>o(p.target.value)},s.createElement("option",{value:void 0},"Select a asset"),B.map(p=>s.createElement("option",{key:p.key,value:p.key},p.label))))),s.createElement("div",{className:"flex flex-col gap-2 max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4 "},s.createElement("div",{className:"sm:sm:w-[180px]"},"Validator:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"validator-select",name:"validator-select",className:"sm:w-[205px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:p=>I(p.target.value)},s.createElement("option",{value:void 0},"Select a validator"),k.map(p=>s.createElement("option",{key:p,value:p},p))))),x==="Custom"&&s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Validator Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"validatorAddress",name:"validatorAddress",value:_,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter Delegator Address",onChange:p=>E(p.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Amount:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"amount",name:"amount",value:h,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter amount",onChange:p=>c(p.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Delegator Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"delegatorAddress",name:"delegatorAddress",value:a,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter delegator address",onChange:p=>n(p.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Delegator Pubkey Hex:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"delegatorPubkeyHex",name:"delegatorPubkeyHex",value:C,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter a delegator pubkey hex",onChange:p=>b(p.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Sender Pubkey Hex:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"memo",name:"memo",value:f,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter a sender pubkey hex",onChange:p=>y(p.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Gas limit:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"gasLimit",name:"gasLimit",value:v,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter gas limit",onChange:p=>u(p.target.value)})))))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:j,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:i},i?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(t,null,2))))},J=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState("");e.useEffect(()=>{l?L.find(a=>{a.key===l&&d(a)}):d(void 0),h(""),t({})},[l]);const c=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r){alert("Please enter an address!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query GetLidoStakedBalance($asset: SupportedAssets!, $address: String!) {
      staking {
        getLidoStakedBalance(address: $address, asset: $asset) {
          amount
          asset
          chain
          decimal
        }
      }
    }`,variables:{asset:o.key,address:r}})}).then(n=>n.json()).then(n=>{t(n)}).catch(n=>{t(n)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:a=>m(a.target.value)},s.createElement("option",{value:void 0},"Select a asset"),s.createElement("option",{value:"ETH"},"ETH")))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("span",null,"Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"address",name:"Address",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:a=>h(a.target.value)})))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:c,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},Y=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState(""),[c,a]=e.useState(void 0),[n,C]=e.useState(void 0),b=()=>{h(""),a(void 0),C(void 0)};e.useEffect(()=>{l?L.find(y=>{y.key===l&&d(y)}):d(void 0),b(),t({})},[l]);const f=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r||!c||!n){alert("Please enter all the required fields!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query CreateLidoStakeTx($input: LidoStakingInput!) {
      staking {
        createLidoStakeTx(input: $input) {
          chainId
          data
          fromAddress
          nonce
          toAddress
          value
        }
      }
    }`,variables:{input:{asset:o.key,address:r,stakeValue:Number(c),nonce:Number(n)}}})}).then(v=>v.json()).then(v=>{t(v)}).catch(v=>{t(v)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4"},s.createElement("div",{className:"flex items-center gap-10 max-sm:flex-col max-sm:items-start max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:y=>m(y.target.value)},s.createElement("option",{value:void 0},"Select a asset"),s.createElement("option",{value:"ETH"},"ETH"),s.createElement("option",{value:"MATIC_ERC20"},"MATIC_ERC20")))),s.createElement("div",{className:"flex flex-col gap-2 max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"address",name:"address",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:y=>h(y.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Stake Value:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"stakeValue",name:"stakeValue",value:c,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter stake value",onChange:y=>a(y.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Nonce:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"nonce",name:"nonce",value:n,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter nonce",onChange:y=>C(y.target.value)})))))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:f,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},U=()=>{const F="https://gql-router.dev.${process.env.VITE_BASE_SERVICE}/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState("");e.useEffect(()=>{l?L.find(a=>{a.key===l&&d(a)}):d(void 0),h(""),t({})},[l]);const c=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r){alert("Please enter an address!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query LidoCheckErc20Allowance($ownerAddress: String!, $asset: SupportedAssets!) {
      staking {
        lidoCheckErc20Allowance(input: {ownerAddress: $ownerAddress, asset: $asset})
      }
    }`,variables:{asset:o.key,ownerAddress:r}})}).then(n=>n.json()).then(n=>{t(n)}).catch(n=>{t(n)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:a=>m(a.target.value)},s.createElement("option",{value:void 0},"Select a asset"),s.createElement("option",{value:"ETH"},"ETH")))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("span",null,"Owner Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"address",name:"Address",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:a=>h(a.target.value)})))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:c,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},K=()=>{const F="https://gql-router.xdefi.services/graphql",[k,i]=e.useState(!1),[g,t]=e.useState({}),[l,m]=e.useState(void 0),[o,d]=e.useState(void 0),[r,h]=e.useState(""),[c,a]=e.useState(""),[n,C]=e.useState(void 0),[b,f]=e.useState(void 0),y=()=>{h(""),a(""),C(void 0),f(void 0)};e.useEffect(()=>{l?L.find(u=>{u.key===l&&d(u)}):d(void 0),y(),t({})},[l]);const v=async()=>{if(i(!0),t({}),!o){alert("Please select a asset!"),i(!1);return}if(!r||!c||!n||!b){alert("Please enter all the required fields!"),i(!1);return}await fetch(F,{method:"POST",headers:{"Content-Type":"application/json","apollographql-client-name":"docs-staking-api","apollographql-client-version":"v1.0"},body:JSON.stringify({query:`query createErc20ApproveTx($input: Erc20ApproveInput!) {
      staking {
        createErc20ApproveTx(input: $input) {
          chainId
          data
          fromAddress
          nonce
          toAddress
          value
        }
      }
    }`,variables:{input:{asset:o.key,fromAddress:r,spenderAddress:c,amount:Number(n),nonce:Number(b)}}})}).then(x=>x.json()).then(x=>{t(x)}).catch(x=>{t(x)}).finally(()=>{i(!1)})};return s.createElement(s.Fragment,null,s.createElement("div",{className:"flex items-center gap-4"},s.createElement("div",{className:"flex items-center gap-10 max-sm:flex-col max-sm:items-start max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4"},s.createElement("span",null,"Asset:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("select",{id:"asset-select",name:"asset-select",className:"bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",onChange:u=>m(u.target.value)},s.createElement("option",{value:void 0},"Select a asset"),s.createElement("option",{value:"MATIC_ERC20"},"MATIC_ERC20")))),s.createElement("div",{className:"flex flex-col gap-2 max-sm:gap-4"},s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"From Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"fromAddress",name:"fromAddress",value:r,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an address",onChange:u=>h(u.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Spender Address:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"text",id:"spenderAddress",name:"spenderAddress",value:c,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter an spender address",onChange:u=>a(u.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Amount:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"amount",name:"amount",value:n,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter amount",onChange:u=>C(u.target.value)}))),s.createElement("div",{className:"flex items-center gap-4 max-sm:flex-col max-sm:items-start max-sm:gap-2"},s.createElement("div",{className:"sm:w-[180px]"},"Nonce:"),s.createElement("div",{className:"border border-[#e2e2e3] dark:border-[#2e2e32] hover:border-[#05C92F] rounded-lg overflow-hidden w-fit"},s.createElement("input",{type:"number",id:"nonce",name:"nonce",value:b,className:"max-sm:w-[300px] bg-gray-50 text-gray-900 px-2 py-1 dark:bg-gray-700 dark:placeholder-gray-400 dark:text-white",placeholder:"Enter nonce",onChange:u=>f(u.target.value)})))))),s.createElement("div",{className:"flex justify-center mt-4"},s.createElement("button",{onClick:v,className:"flex justify-center items-center gap-2 bg-[#05C92F] text-[#001405] px-4 py-2 border-solid border-[1px] border-[#001405] rounded-full",disabled:k},k?s.createElement(s.Fragment,null,s.createElement(N,null),"Fetching..."):s.createElement(s.Fragment,null,s.createElement(D,null),"Test the query"))),s.createElement("div",{className:"my-4 rounded-lg bg-[#F6F6F7] text-[#24292E] dark:bg-[#161618] dark:text-[#E1E4E8]"},s.createElement("div",{className:"px-5 border-b border-[#e2e2e3] dark:border-black"},s.createElement("span",{className:"inline-block border-b-2 border-[#05C92F] text-[14px] leading-[48px]"},"Response")),s.createElement("pre",{className:"p-5 max-h-[600px] overflow-auto"},JSON.stringify(g,null,2))))},X=T(`<h1 id="staking-api" tabindex="-1">Staking API <a class="header-anchor" href="#staking-api" aria-label="Permalink to &quot;Staking API&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Staking is a process that involves holding funds in a cryptocurrency wallet to support the operations of a blockchain network. In return, users receive rewards for their contributions to the network. These rewards are also referred to as staking yields or interest.</p><p>Ctrl (fka XDEFI) offers a staking API that enables developers to engage with the staking features across multiple blockchain networks. This API is crafted for simplicity and ease of use, emphasizing a high degree of abstraction from the complexities of the underlying blockchains.</p><p>The base URL for all API endpoints is: <a href="https://gql-router.xdefi.services/graphql" target="_blank" rel="noreferrer">https://gql-router.xdefi.services/graphql</a></p><p>Below are the services provided by the staking API.</p><h2 id="cosmos-chains" tabindex="-1">Cosmos Chains <a class="header-anchor" href="#cosmos-chains" aria-label="Permalink to &quot;Cosmos Chains&quot;">​</a></h2><p>Our staking API extends comprehensive support to a wide array of Cosmos chains using STRIDE, enabling seamless interactions with their staking functionalities. Supported assets include <code>ATOM</code>, <code>OSMO</code>, <code>JUNO</code>, <code>STARS</code>, <code>LUNA</code>, <code>SEI</code>, <code>AXL</code>, <code>KAVA</code>, <code>AKASH</code>, <code>STRD</code>, <code>KUJI</code>, and <code>CRE</code>.</p><h3 id="liquid-staking-stride" tabindex="-1">Liquid staking (STRIDE) <a class="header-anchor" href="#liquid-staking-stride" aria-label="Permalink to &quot;Liquid staking (STRIDE)&quot;">​</a></h3><p>Stride is a liquid staking solution within the Cosmos ecosystem, designed to enhance the utility and liquidity of staked tokens. By offering liquid staking services, Stride enables users across any Cosmos chain to stake their tokens and receive liquid staked tokens in return.</p><h4 id="get-balance-of-staked-asset-on-stride" tabindex="-1">Get balance of staked asset on STRIDE <a class="header-anchor" href="#get-balance-of-staked-asset-on-stride" aria-label="Permalink to &quot;Get balance of staked asset on STRIDE&quot;">​</a></h4><p>You can use the <code>getStrideStakedAssetBalance</code> query to get the balance of a staked asset on STRIDE. The query takes the following parameters:</p><ul><li><code>strideAddress</code>: The STRIDE address for which to get the balance.</li><li><code>asset</code>: The asset for which to get the balance.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-hglKy" id="tab-izvfJfi" checked="checked"><label for="tab-izvfJfi">GetStrideStakedAssetBalance</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query GetStrideStakedAssetBalance($strideAddress: String!, $asset: SupportedAssets!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    getStrideStakedAssetBalance(asset: $asset, strideAddress: $strideAddress) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      amount</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      decimal</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      denom</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      asset: asset, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      strideAddress: address, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,14),Z=T(`<h4 id="create-staking-transaction-on-stride-from-any-cosmos-chain" tabindex="-1">Create Staking Transaction on Stride from any Cosmos Chain <a class="header-anchor" href="#create-staking-transaction-on-stride-from-any-cosmos-chain" aria-label="Permalink to &quot;Create Staking Transaction on Stride from any Cosmos Chain&quot;">​</a></h4><p>You can use the <code>createStrideLiquidStakingTx</code> mutation to create a staking transaction on STRIDE from any Cosmos chain. The mutation takes the following parameters:</p><ul><li><code>recieverStrideAddr</code>: The STRIDE address of the recipient.</li><li><code>amount</code>: The amount of the asset to stake.</li><li><code>senderAddr</code>: The address of the sender.</li><li><code>senderPubkeyHex</code>: The public key of the sender.</li><li><code>asset</code>: The asset to stake.</li><li><code>timeoutHeight</code>: The timeout height for the transaction.</li><li><code>gasLimit</code>: The gas limit for the transaction.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-E1Coi" id="tab-riMZdMo" checked="checked"><label for="tab-riMZdMo">CreateStrideLiquidStakingTx</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query CreateStrideLiquidStakingTx($input: StrideStakingInput!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  createStrideLiquidStakingTx(input: $input)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        recieverStrideAddr: recieverStrideAddr, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Reciever STRIDE address</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Amount to stake</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderAddr: senderAddr, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sender address</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        senderPubkeyHex: senderPubkeyHex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sender public key</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        asset: asset, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        timeoutHeight: timeoutHeight, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Timeout height</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gasLimit: gasLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gas limit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,4),z=T(`<h3 id="native-staking" tabindex="-1">Native staking <a class="header-anchor" href="#native-staking" aria-label="Permalink to &quot;Native staking&quot;">​</a></h3><p>Native staking allows users to delegate their assets to validators on the Cosmos network. The staking API provides support for native staking on the Cosmos network, enabling users to delegate their assets to validators.</p><h4 id="get-cosmos-delegations" tabindex="-1">Get Cosmos Delegations <a class="header-anchor" href="#get-cosmos-delegations" aria-label="Permalink to &quot;Get Cosmos Delegations&quot;">​</a></h4><p>You can use the <code>getCosmosDelegations</code> query to get the delegations of a Cosmos address. The query takes the following parameters:</p><ul><li><code>asset</code>: The asset for which to get the delegations.</li><li><code>address</code>: The address for which to get the delegations.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Dh64e" id="tab-vO5flsP" checked="checked"><label for="tab-vO5flsP">GetCosmosDelegations</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query getCosmosDelegations($asset: SupportedAssets!, $address: String!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    getCosmosDelegations(address: $address, asset: $asset) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      amount</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      decimal</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      denom</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      validatorAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      validatorName</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      address: address, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,6),W=T(`<h4 id="create-native-staking-tx-and-delegate-to-validator-meria-stakelab-or-custom-validator-s-address" tabindex="-1">Create native staking TX and delegate to validator (Meria, StakeLab or Custom validator’s address) <a class="header-anchor" href="#create-native-staking-tx-and-delegate-to-validator-meria-stakelab-or-custom-validator-s-address" aria-label="Permalink to &quot;Create native staking TX and delegate to validator (Meria, StakeLab or Custom validator’s address)&quot;">​</a></h4><p>You can use the <code>createCosmosDelegateTx</code> mutation to create a native staking transaction and delegate to a validator. The mutation takes the following parameters:</p><ul><li><code>asset</code>: The asset to stake.</li><li><code>validator</code>: The validator to delegate to. Supported validators: <code>Meria</code>, <code>StakeLab</code> or <code>null</code> (Custom). If validator is <code>Custom</code>, you need to provide the <code>validatorAddress</code> parameter.</li><li><code>validatorAddress</code>: The address of the custom validator.</li><li><code>amount</code>: The amount to stake.</li><li><code>delegatorAddress</code>: An address related to the chain which the asset is the native asset for.</li><li><code>delegatorPubkeyHex</code>: The public key of the delegator.</li><li><code>memo</code>: Some memo for.</li><li><code>gasLimit</code>: The gas limit.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-iAwIA" id="tab-OQtDOLF" checked="checked"><label for="tab-OQtDOLF">Meria/StakeLab Validator</label><input type="radio" name="group-iAwIA" id="tab-xG0o9fI"><label for="tab-xG0o9fI">Custom validator’s address</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query CreateCosmosDelegateTx($delegationInput: CosmosDelegationInput!, $validatorAddress: String, $provider: Providers) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    createCosmosDelegateTx(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      delegationInput: $delegationInput</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      provider: $provider</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      validatorAddress: $validatorAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    )</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      delegationInput: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: amount, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input amount</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        delegatorAddress: delegatorAddress, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input delegatorAddress</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        delegatorPubkeyHex: delegatorPubkeyHex, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input delegatorPubkeyHex</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        memo: memo, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input memo</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gasLimit: gasLimit, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input Gas limit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Meria&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;StakeLab&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query CreateCosmosDelegateTx($delegationInput: CosmosDelegationInput!, $validatorAddress: String, $provider: Providers) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    createCosmosDelegateTx(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      delegationInput: $delegationInput</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      provider: $provider</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      validatorAddress: $validatorAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    )</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      delegationInput: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: amount, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input amount</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        delegatorAddress: delegatorAddress, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input delegatorAddress</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        delegatorPubkeyHex: delegatorPubkeyHex, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input delegatorPubkeyHex</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        memo: memo, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input memo</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gasLimit: gasLimit, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input Gas limit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      provider: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      validatorAddress: validatorAddress, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input validatorAddress</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,4),ss=T(`<h2 id="ethereum-chains" tabindex="-1">Ethereum Chains <a class="header-anchor" href="#ethereum-chains" aria-label="Permalink to &quot;Ethereum Chains&quot;">​</a></h2><p>Our staking API extends comprehensive support to Ethereum chains using LIDO, enabling seamless interactions with their staking functionalities. Supported assets include <code>ETH</code> (Ethereum) and <code>MATIC_ERC20</code> (Polygon).</p><h3 id="liquid-staking-lido" tabindex="-1">Liquid staking (LIDO) <a class="header-anchor" href="#liquid-staking-lido" aria-label="Permalink to &quot;Liquid staking (LIDO)&quot;">​</a></h3><p>Lido (LDO) is a liquid staking protocol designed to bring enhanced liquidity and accessibility to staked assets on various Proof of Stake (PoS) blockchains, including Ethereum, and Polygon.</p><h4 id="get-balance-of-stakes-asset-on-lido-for-steth" tabindex="-1">Get balance of stakes asset on LIDO for stETH <a class="header-anchor" href="#get-balance-of-stakes-asset-on-lido-for-steth" aria-label="Permalink to &quot;Get balance of stakes asset on LIDO for stETH&quot;">​</a></h4><p>You can use the <code>getLidoStakedAssetBalance</code> query to get the balance of a staked asset on LIDO. The query takes the following parameters:</p><ul><li><code>asset</code>: <code>ETH</code></li><li><code>address</code>: The address for which to get the balance.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-7mgdW" id="tab-ZyJI88E" checked="checked"><label for="tab-ZyJI88E">GetLidoStakedBalance</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query GetLidoStakedBalance($asset: SupportedAssets!, $address: String!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    getLidoStakedBalance(address: $address, asset: $asset) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      amount</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      asset</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      chain</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      decimal</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      address: address, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,8),es=T(`<h4 id="create-staking-tx-for-eth-erc20-on-lido" tabindex="-1">Create staking Tx for ETH/ERC20 on LIDO <a class="header-anchor" href="#create-staking-tx-for-eth-erc20-on-lido" aria-label="Permalink to &quot;Create staking Tx for ETH/ERC20 on LIDO&quot;">​</a></h4><p>You can use the <code>createLidoStakeTx</code> query to create a staking transaction on LIDO. The query takes the following parameters:</p><ul><li><code>asset</code>: The asset to stake.</li><li><code>address</code>: The address of the sender.</li><li><code>stakeValue</code>: The amount to stake.</li><li><code>nonce</code>: The nonce for the transaction.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-tTx_G" id="tab-Bu32YCp" checked="checked"><label for="tab-Bu32YCp">CreateLidoStakeTx</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query CreateLidoStakeTx($input: LidoStakingInput!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    createLidoStakeTx(input: $input) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      chainId</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      data</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      fromAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      nonce</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      toAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      value</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        address: address, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input address</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stakeValue: stakeValue, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input stakeValue</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        nonce: nonce, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input nonce</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,4),as=T(`<h4 id="check-the-allowance-for-staking-erc20-matic-to-stmatic-contract" tabindex="-1">Check the allowance for staking erc20 MATIC to stMATIC contract <a class="header-anchor" href="#check-the-allowance-for-staking-erc20-matic-to-stmatic-contract" aria-label="Permalink to &quot;Check the allowance for staking erc20 MATIC to stMATIC contract&quot;">​</a></h4><p>You can use the <code>lidoCheckErc20Allowance</code> query to check the allowance for staking erc20 MATIC to the stMATIC contract. The query takes the following parameters:</p><ul><li><code>asset</code>: <code>ETH</code></li><li><code>ownerAddress</code>: The ethereum address which you try to stake erc20 MATIC on.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-SVcKy" id="tab-kovNUkF" checked="checked"><label for="tab-kovNUkF">LidoCheckErc20Allowance</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query LidoCheckErc20Allowance($ownerAddress: String!, $asset: SupportedAssets!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    lidoCheckErc20Allowance(input: {ownerAddress: $ownerAddress, asset: $asset})</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ownerAddress: address, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input address</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,4),is=T(`<h4 id="approve-tx-to-increase-allowance-for-stmatic-to-spend-matic-from-the-address" tabindex="-1">Approve Tx to increase allowance for stMATIC to spend MATIC from the address <a class="header-anchor" href="#approve-tx-to-increase-allowance-for-stmatic-to-spend-matic-from-the-address" aria-label="Permalink to &quot;Approve Tx to increase allowance for stMATIC to spend MATIC from the address&quot;">​</a></h4><p>You can use the <code>createErc20ApproveTx</code> query to create an approval transaction to increase the allowance for stMATIC to spend MATIC from the address. The query takes the following parameters:</p><ul><li><code>asset</code>: <code>MATIC_ERC20</code></li><li><code>fromAddress</code>: The ethereum address which you try to stake erc20 MATIC on.</li><li><code>spenderAddress</code>: The address of the spender.</li><li><code>amount</code>: The amount to approve.</li><li><code>nonce</code>: The nonce for the transaction.</li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-_DMiy" id="tab-GW9gFBn" checked="checked"><label for="tab-GW9gFBn">CreateErc20ApproveTx</label></div><div class="blocks"><div class="language-javascript vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GRAPHQL_ENDPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://gql-router.xdefi.services/graphql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`query createErc20ApproveTx($input: Erc20ApproveInput!) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  staking {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    createErc20ApproveTx(input: $input) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      chainId</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      data</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      fromAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      nonce</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      toAddress</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      value</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GRAPHQL_ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Content-Type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;application/json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docs-staking-api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;apollographql-client-version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;v1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    query,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    variables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      input: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        asset: asset.key, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Asset selected</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        fromAddress: fromAddress, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input fromAddress</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        spenderAddress: spenderAddress, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input spenderAddress</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        amount: amount, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input amount</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        nonce: nonce, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Input nonce</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do something with the result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div></div></div>`,4),ps=JSON.parse('{"title":"Staking API","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Staking API | Ctrl Dev Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"staking/staking-api.md","filePath":"staking/staking-api.md","lastUpdated":1751281553000}'),ts={name:"staking/staking-api.md"},ds=Object.assign(ts,{setup(F){const k=q(),i=q(),g=q(),t=q(),l=q(),m=q(),o=q(),d=q();return H(()=>{A(k.value).render(e.createElement(V,{},null)),A(i.value).render(e.createElement(Q,{},null)),A(g.value).render(e.createElement(M,{},null)),A(t.value).render(e.createElement(R,{},null)),A(t.value).render(e.createElement(R,{},null)),A(l.value).render(e.createElement(J,{},null)),A(m.value).render(e.createElement(Y,{},null)),A(o.value).render(e.createElement(U,{},null)),A(d.value).render(e.createElement(K,{},null))}),(r,h)=>($(),G("div",null,[X,S("div",{ref_key:"refGetStrideStakedAssetBalance",ref:k},null,512),Z,S("div",{ref_key:"refCreateStrideLiquidStakingTx",ref:i},null,512),z,S("div",{ref_key:"refGetCosmosDelegations",ref:g},null,512),W,S("div",{ref_key:"refCreateNativeStakingTx",ref:t},null,512),ss,S("div",{ref_key:"refGetLidoStakedBalance",ref:l},null,512),es,S("div",{ref_key:"refCreateLidoStakeTx",ref:m},null,512),as,S("div",{ref_key:"refLidoCheckErc20Allowance",ref:o},null,512),is,S("div",{ref_key:"refCreateErc20ApproveTx",ref:d},null,512)]))}});export{ps as __pageData,ds as default};
