import{_ as e,c as a,o as i,U as t}from"./chunks/framework.p3cwZ5FP.js";const g=JSON.parse('{"title":"Native integration","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Native integration | XDEFI Dev Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"about/xdefi-technologies/native-integration.md","filePath":"about/xdefi-technologies/native-integration.md","lastUpdated":1720081291000}'),o={name:"about/xdefi-technologies/native-integration.md"},n=t('<h1 id="native-integration" tabindex="-1">Native integration <a class="header-anchor" href="#native-integration" aria-label="Permalink to &quot;Native integration&quot;">​</a></h1><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><ul><li><a href="#utxo-s">UTXO&#39;s</a></li><li><a href="#evm-s">EVM&#39;s</a></li><li><a href="#cosmos-chains">Cosmos chains</a></li><li><a href="#near">Near</a></li><li><a href="#solana">Solana</a></li></ul><h2 id="utxo-s" tabindex="-1">UTXO&#39;s <a class="header-anchor" href="#utxo-s" aria-label="Permalink to &quot;UTXO&#39;s&quot;">​</a></h2><ul><li>Bitcoin (BTC)</li><li>Bitcoin Cash (BCH)</li><li>Dogecoin (DOGE)</li><li>Litecoin (LTC)</li></ul><h2 id="evm-s" tabindex="-1">EVM&#39;s <a class="header-anchor" href="#evm-s" aria-label="Permalink to &quot;EVM&#39;s&quot;">​</a></h2><ul><li>Aurora (AURORA)</li><li>Avalanche (AVAX)</li><li>BNB Beacon Chain (BNB)</li><li>BNB Smart Chain (BNB)</li><li>Canto (CANTO)</li><li>Cronos (CRO)</li><li>Ethereum (ETH)</li><li>Fantom (FTM)</li><li>Gnosis (xDAI)</li><li>Klaytn (KLAY)</li><li>Optimism (ETH)</li><li>Polygon (MATIC)</li></ul><p>The others <strong>EVM&#39;s blockchains</strong> are <a href="./custom-integration">supported non natively</a> using Custom Network integration, allowing users and developers to interact and build on them.</p><p>See more on <a href="./add-custom-network">Adding a custom EVM network on XDEFI</a> documentation.</p><p>See more on <a href="/pr-preview/pr-50/developers/ethereum">Building an EVM dApp</a> with XDEFI documentation.</p><p>You can request an EVM native integration by sending us an <a href="mailto:integration@xdefi.io" target="_blank" rel="noreferrer">email</a>.</p><p><em>(Note that native integration requiere an upfront payment to start implementing it)</em></p><h2 id="cosmos-chains" tabindex="-1">Cosmos chains <a class="header-anchor" href="#cosmos-chains" aria-label="Permalink to &quot;Cosmos chains&quot;">​</a></h2><ul><li>Akash (AKT)</li><li>Cosmos (ATOM)</li><li>Crescent (CRE)</li><li>Crypto.org (CRO)</li><li>Juno (JUNO)</li><li>Kava (KAVA)</li><li>Kujira (KUJI)</li><li>Mars (MARS)</li><li>Osmosis (OSMO)</li><li>Sei Testnet (SEI)</li><li>Stargaze (STARS)</li><li>Stride (STRD)</li><li>Terra (LUNA)</li><li>THORChain (RUNE)</li></ul><p>The others <strong>Cosmos chains</strong> are <a href="./custom-integration">supported non natively</a> using Custom Network integration, allowing users and developers to interact and build on them.</p><p>See more on <a href="./add-custom-network">Adding a custom Cosmos network on XDEFI</a> documentation.</p><p>See more on <a href="/pr-preview/pr-50/developers/cosmos">Building a Cosmos dApp</a> with XDEFI documentation.</p><p>You can request a Cosmos native integration by sending us an <a href="mailto:integration@xdefi.io" target="_blank" rel="noreferrer">email</a>.</p><p><em>(Note that native integration requiere an upfront payment to start implementing it)</em></p><h2 id="near" tabindex="-1">Near <a class="header-anchor" href="#near" aria-label="Permalink to &quot;Near&quot;">​</a></h2><ul><li>Near Protocol (NEAR)</li></ul><p>See more on <a href="/pr-preview/pr-50/developers/near">Building a Near dApp</a> with XDEFI documentation.</p><h2 id="solana" tabindex="-1">Solana <a class="header-anchor" href="#solana" aria-label="Permalink to &quot;Solana&quot;">​</a></h2><ul><li>Solana (SOL)</li></ul><p>See more on <a href="/pr-preview/pr-50/developers/solana">Building a Solana dApp</a> with XDEFI documentation.</p>',25),r=[n];function l(s,h,m,d,u,c){return i(),a("div",null,r)}const f=e(o,[["render",l]]);export{g as __pageData,f as default};
