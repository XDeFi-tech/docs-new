import{_ as e,c as a,o as t,U as i}from"./chunks/framework.qmyuZkAz.js";const b=JSON.parse('{"title":"Mobile Wallet Bitcoin Integration","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Mobile Wallet Bitcoin Integration | Ctrl Dev Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/mobile-bitcoin.md","filePath":"developers/mobile-bitcoin.md","lastUpdated":1742900885000}'),o={name:"developers/mobile-bitcoin.md"},s=i('<h1 id="mobile-wallet-bitcoin-integration" tabindex="-1">Mobile Wallet Bitcoin Integration <a class="header-anchor" href="#mobile-wallet-bitcoin-integration" aria-label="Permalink to &quot;Mobile Wallet Bitcoin Integration&quot;">​</a></h1><p>This document provides details on integrating Bitcoin with the mobile wallet application. The integration supports various functionalities such as sending transactions, retrieving account addresses, and signing messages.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="sendtransfer" tabindex="-1">sendTransfer <a class="header-anchor" href="#sendtransfer" aria-label="Permalink to &quot;sendTransfer&quot;">​</a></h3><p>This method is used to sign and submit a transfer of any amount of Bitcoin to a single recipient address.</p><h4 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>account</code>: The connected account&#39;s first external address.</li><li><code>recipientAddress</code>: The recipient&#39;s public address.</li><li><code>amount</code>: The amount of Bitcoin to send, denominated in satoshis.</li><li><code>changeAddress</code>: (Optional) The sender&#39;s public address to receive change.</li><li><code>memo</code>: (Optional) The OP_RETURN value as a hex string without 0x prefix.</li></ul><h4 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li><code>txid</code>: The transaction id as a hex string without 0x prefix.</li></ul><h3 id="getaccountaddresses" tabindex="-1">getAccountAddresses <a class="header-anchor" href="#getaccountaddresses" aria-label="Permalink to &quot;getAccountAddresses&quot;">​</a></h3><p>This method returns all current addresses needed for a dapp to fetch all UTXOs, calculate the total balance, and prepare transactions.</p><h4 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>account</code>: The connected account&#39;s first external address.</li><li><code>intentions</code>: (Optional) Filter what addresses to return, e.g., &quot;payment&quot; or &quot;ordinal&quot;.</li></ul><h4 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li>An array of objects containing: <ul><li><code>address</code>: Public address belonging to the account.</li><li><code>publicKey</code>: (Optional) Public key for the derivation path in hex.</li><li><code>path</code>: (Optional) Derivation path of the address.</li></ul></li></ul><h3 id="signpsbt" tabindex="-1">signPsbt <a class="header-anchor" href="#signpsbt" aria-label="Permalink to &quot;signPsbt&quot;">​</a></h3><p>This method can be used to request the signature of a Partially Signed Bitcoin Transaction (PSBT).</p><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>account</code>: The connected account&#39;s first external address.</li><li><code>psbt</code>: Base64 encoded string of the PSBT to sign.</li><li><code>signInputs</code>: Array of objects specifying which inputs to sign.</li><li><code>broadcast</code>: (Optional) Whether to finalize and broadcast the transaction after signing it.</li></ul><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li><code>psbt</code>: The base64 encoded signed PSBT.</li><li><code>txid</code>: (Optional) The transaction ID if the transaction was broadcasted.</li></ul><h3 id="signmessage" tabindex="-1">signMessage <a class="header-anchor" href="#signmessage" aria-label="Permalink to &quot;signMessage&quot;">​</a></h3><p>This method is used to sign a message with one of the connected account&#39;s addresses.</p><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><ul><li><code>account</code>: The connected account&#39;s first external address.</li><li><code>message</code>: The message to be signed by the wallet.</li><li><code>address</code>: (Optional) The address whose private key to use for signing the message.</li><li><code>protocol</code>: (Optional) Preferred signature type, default is <code>&quot;ecdsa&quot;</code>.</li></ul><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><ul><li><code>address</code>: The Bitcoin address used to sign the message.</li><li><code>signature</code>: Hex encoded bytes of the signature.</li><li><code>messageHash</code>: (Optional) Hex encoded bytes of the message hash.</li></ul>',27),n=[s];function r(d,l,c,h,u,p){return t(),a("div",null,n)}const g=e(o,[["render",r]]);export{b as __pageData,g as default};
